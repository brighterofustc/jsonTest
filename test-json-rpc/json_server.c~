/********************************************************************/
/* Copyright (C) SSE-USTC, 2013-2014                                */
/*                                                                  */
/*  FILE NAME             :  json_server.c                          */
/*  PRINCIPAL AUTHOR      :  ZhangFuqaing                           */
/*  LANGUAGE              :  C                                      */
/*  TARGET ENVIRONMENT    :  ANY                                    */
/*  DATE OF FIRST RELEASE :  2015/01/07                             */
/*  DESCRIPTION           :  test file for json                     */
/********************************************************************/

/*
 * Revision log:
 *
 * Created by Zhang Fuqiang,2015/01/07
 *
 */

#include<stdio.h> 			
#include<stdlib.h>			
#include<sys/types.h>		
#include<sys/wait.h>		
#include<string.h>			
#include<pthread.h>

#include "stream.h"
#include "json.h"
#include "jsonrpc.h"

int main(int argc, char **argv)
{
   
    struct jsonrpc  **rpcs;
    const char* pstream_name = "ptcp:1234";
    char buffer[50];
    uint8_t dscp = 1;
    int actualrecv = 0;
    int error;

    struct pstream *p_pstream;
    error = jsonrpc_pstream_open(pstream_name,&p_pstream,dscp);
    if(error)
    {
        printf("jsonrpc pstream open failure!\n");
        exit(1);
    }
  
    while(1)
    {  
        struct stream *p_stream; 
	while(pstream_accept(p_pstream, &p_stream));

        printf("\nget one steam connect success!\n");

        printf("p_pstream name:%s\n", pstream_get_name(p_pstream));
        printf("p_pstream bound_port:%d\n", pstream_get_bound_port(p_pstream));
        printf("p_stream name:%s\n", stream_get_name(p_stream));
        printf("<remote_ip,remote_port> : <%d,%d>\n", stream_get_remote_ip(p_stream),stream_get_remote_port(p_stream));
        printf("<local_ip,local_port> : <%d,%d>\n", stream_get_local_ip(p_stream),stream_get_local_port(p_stream));

            actualrecv = stream_recv(p_stream,buffer,sizeof(buffer));
 
            if(actualrecv < 0)
            {
                printf("pstream receive failure!\n");
            }
            else if(actualrecv == 0)
            {
                printf("pstream receive 0 bytes!\n");
            }
            else
            {
                printf("pstream actual receive %d bytes,buffer:%s\n\n",actualrecv,buffer);
            }
         }

        stream_close(p_stream);
        pstream_close(p_pstream);
    }   

    return 0;  
}
